Object.is()  判断传入的参数是否相等

var obj3=Object.assign(obj1,obj2) 对象的合并,相同的属性时，后面的会把前面的覆盖

Object.getPrototypeOf(obj);
    获取obj.prototype对象

Object.setPrototypeOf(obj);
    设置prototype对象

_proto_  用来读取和设置当前对象的prototype对象
  例如：var obj={
     _proto_:super
  }

Proxy   代理
  var p1=new Proxy(obj,{
     get(obj,attr){  //当属性被访问时触发
       console.log(obj,attr);
       return obj[attr]
     },
     set(obj,attr,value){
       return obj(attr)  //当属性被改变时触发
     }
  })

Object,observer(obj,observe, [eventType])
  用于当对象发生变化时，调用回调函数
     1、需要监控的对象
     2、回调函数（接收一个数组参数）
     3、evetType 添加监控的事件
        add:添加属性
        update:属性值的变化
        delete:删除属性
        setPrototype:设置原型
        reconfigure:属性的attribute对象发生变化
 object.unobserver(obj,observe)  取消检测

Reflect.ownKeys(obj)  把对象的键值都拿出来


